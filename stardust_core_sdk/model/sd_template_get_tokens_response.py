# coding: utf-8

"""
    Stardust API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2023-05-08T04:33:59Z
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stardust_core_sdk import schemas  # noqa: F401


class SDTemplateGetTokensResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Token data
    """


    class MetaOapg:
        required = {
            "player",
            "token",
        }
        
        class properties:
            
            
            class token(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "amount",
                        "id",
                    }
                    
                    class properties:
                        
                        
                        class id(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_maximum = 2147483647
                                inclusive_minimum = 0
                        amount = schemas.StrSchema
                        
                        
                        class templateId(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_maximum = 2147483647
                                inclusive_minimum = 0
                        name = schemas.StrSchema
                        
                        
                        class props(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "immutable",
                                    "inherited",
                                    "mutable",
                                }
                                
                                class properties:
                                    immutable = schemas.DictSchema
                                    mutable = schemas.DictSchema
                                    inherited = schemas.DictSchema
                                    __annotations__ = {
                                        "immutable": immutable,
                                        "mutable": mutable,
                                        "inherited": inherited,
                                    }
                            
                            immutable: MetaOapg.properties.immutable
                            inherited: MetaOapg.properties.inherited
                            mutable: MetaOapg.properties.mutable
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["immutable"]) -> MetaOapg.properties.immutable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mutable"]) -> MetaOapg.properties.mutable: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["inherited"]) -> MetaOapg.properties.inherited: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["immutable", "mutable", "inherited", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["immutable"]) -> MetaOapg.properties.immutable: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mutable"]) -> MetaOapg.properties.mutable: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["inherited"]) -> MetaOapg.properties.inherited: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["immutable", "mutable", "inherited", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                immutable: typing.Union[MetaOapg.properties.immutable, dict, frozendict.frozendict, ],
                                inherited: typing.Union[MetaOapg.properties.inherited, dict, frozendict.frozendict, ],
                                mutable: typing.Union[MetaOapg.properties.mutable, dict, frozendict.frozendict, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'props':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    immutable=immutable,
                                    inherited=inherited,
                                    mutable=mutable,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        publicMetadata = schemas.DictSchema
                        __annotations__ = {
                            "id": id,
                            "amount": amount,
                            "templateId": templateId,
                            "name": name,
                            "props": props,
                            "publicMetadata": publicMetadata,
                        }
                
                amount: MetaOapg.properties.amount
                id: MetaOapg.properties.id
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["templateId"]) -> MetaOapg.properties.templateId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["props"]) -> MetaOapg.properties.props: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["publicMetadata"]) -> MetaOapg.properties.publicMetadata: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "amount", "templateId", "name", "props", "publicMetadata", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["templateId"]) -> typing.Union[MetaOapg.properties.templateId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["props"]) -> typing.Union[MetaOapg.properties.props, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["publicMetadata"]) -> typing.Union[MetaOapg.properties.publicMetadata, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "amount", "templateId", "name", "props", "publicMetadata", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    amount: typing.Union[MetaOapg.properties.amount, str, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                    templateId: typing.Union[MetaOapg.properties.templateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    props: typing.Union[MetaOapg.properties.props, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    publicMetadata: typing.Union[MetaOapg.properties.publicMetadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'token':
                    return super().__new__(
                        cls,
                        *_args,
                        amount=amount,
                        id=id,
                        templateId=templateId,
                        name=name,
                        props=props,
                        publicMetadata=publicMetadata,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class player(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "id",
                        "uniqueId",
                    }
                    
                    class properties:
                        id = schemas.StrSchema
                        uniqueId = schemas.StrSchema
                        image = schemas.StrSchema
                        deletedAt = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "uniqueId": uniqueId,
                            "image": image,
                            "deletedAt": deletedAt,
                        }
                
                id: MetaOapg.properties.id
                uniqueId: MetaOapg.properties.uniqueId
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uniqueId"]) -> MetaOapg.properties.uniqueId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deletedAt"]) -> MetaOapg.properties.deletedAt: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "uniqueId", "image", "deletedAt", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uniqueId"]) -> MetaOapg.properties.uniqueId: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deletedAt"]) -> typing.Union[MetaOapg.properties.deletedAt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "uniqueId", "image", "deletedAt", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, ],
                    uniqueId: typing.Union[MetaOapg.properties.uniqueId, str, ],
                    image: typing.Union[MetaOapg.properties.image, str, schemas.Unset] = schemas.unset,
                    deletedAt: typing.Union[MetaOapg.properties.deletedAt, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'player':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        uniqueId=uniqueId,
                        image=image,
                        deletedAt=deletedAt,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "token": token,
                "player": player,
            }
    
    player: MetaOapg.properties.player
    token: MetaOapg.properties.token
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player"]) -> MetaOapg.properties.player: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["token", "player", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player"]) -> MetaOapg.properties.player: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token", "player", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        player: typing.Union[MetaOapg.properties.player, dict, frozendict.frozendict, ],
        token: typing.Union[MetaOapg.properties.token, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SDTemplateGetTokensResponse':
        return super().__new__(
            cls,
            *_args,
            player=player,
            token=token,
            _configuration=_configuration,
            **kwargs,
        )
