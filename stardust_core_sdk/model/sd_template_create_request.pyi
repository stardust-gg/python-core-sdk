# coding: utf-8

"""
    Stardust API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2023-05-08T04:33:59Z
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stardust_core_sdk import schemas  # noqa: F401


class SDTemplateCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "cap",
            "name",
            "type",
            "props",
        }
        
        class properties:
            name = schemas.StrSchema
            cap = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FT(cls):
                    return cls("FT")
                
                @schemas.classproperty
                def NFT(cls):
                    return cls("NFT")
            
            
            class props(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        immutable = schemas.DictSchema
                        mutable = schemas.DictSchema
                        __annotations__ = {
                            "immutable": immutable,
                            "mutable": mutable,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["immutable"]) -> MetaOapg.properties.immutable: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mutable"]) -> MetaOapg.properties.mutable: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["immutable", "mutable", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["immutable"]) -> typing.Union[MetaOapg.properties.immutable, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mutable"]) -> typing.Union[MetaOapg.properties.mutable, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["immutable", "mutable", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    immutable: typing.Union[MetaOapg.properties.immutable, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    mutable: typing.Union[MetaOapg.properties.mutable, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'props':
                    return super().__new__(
                        cls,
                        *_args,
                        immutable=immutable,
                        mutable=mutable,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class contractType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INTERNALMINT(cls):
                    return cls("internal-mint")
                
                @schemas.classproperty
                def ERC721(cls):
                    return cls("ERC721")
                
                @schemas.classproperty
                def ERC20(cls):
                    return cls("ERC20")
            ownerAddress = schemas.StrSchema
            publicContractMetadata = schemas.DictSchema
            
            
            class symbol(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "name": name,
                "cap": cap,
                "type": type,
                "props": props,
                "contractType": contractType,
                "ownerAddress": ownerAddress,
                "publicContractMetadata": publicContractMetadata,
                "symbol": symbol,
            }
    
    cap: MetaOapg.properties.cap
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    props: MetaOapg.properties.props
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cap"]) -> MetaOapg.properties.cap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["props"]) -> MetaOapg.properties.props: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractType"]) -> MetaOapg.properties.contractType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerAddress"]) -> MetaOapg.properties.ownerAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicContractMetadata"]) -> MetaOapg.properties.publicContractMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "cap", "type", "props", "contractType", "ownerAddress", "publicContractMetadata", "symbol", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cap"]) -> MetaOapg.properties.cap: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["props"]) -> MetaOapg.properties.props: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractType"]) -> typing.Union[MetaOapg.properties.contractType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerAddress"]) -> typing.Union[MetaOapg.properties.ownerAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicContractMetadata"]) -> typing.Union[MetaOapg.properties.publicContractMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "cap", "type", "props", "contractType", "ownerAddress", "publicContractMetadata", "symbol", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cap: typing.Union[MetaOapg.properties.cap, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        props: typing.Union[MetaOapg.properties.props, dict, frozendict.frozendict, ],
        contractType: typing.Union[MetaOapg.properties.contractType, str, schemas.Unset] = schemas.unset,
        ownerAddress: typing.Union[MetaOapg.properties.ownerAddress, str, schemas.Unset] = schemas.unset,
        publicContractMetadata: typing.Union[MetaOapg.properties.publicContractMetadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SDTemplateCreateRequest':
        return super().__new__(
            cls,
            *_args,
            cap=cap,
            name=name,
            type=type,
            props=props,
            contractType=contractType,
            ownerAddress=ownerAddress,
            publicContractMetadata=publicContractMetadata,
            symbol=symbol,
            _configuration=_configuration,
            **kwargs,
        )
