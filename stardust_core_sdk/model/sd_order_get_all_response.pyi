# coding: utf-8

"""
    Stardust API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2023-05-08T04:33:59Z
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stardust_core_sdk import schemas  # noqa: F401


class SDOrderGetAllResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "tokensRequested",
            "acceptedBy",
            "offeredBy",
            "tokensOffered",
            "status",
        }
        
        class properties:
            offeredBy = schemas.StrSchema
            acceptedBy = schemas.StrSchema
            
            
            class tokensRequested(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "amount",
                                "tokenId",
                            }
                            
                            class properties:
                                
                                
                                class tokenId(
                                    schemas.IntSchema
                                ):
                                    pass
                                
                                
                                class amount(
                                    schemas.IntSchema
                                ):
                                    pass
                                __annotations__ = {
                                    "tokenId": tokenId,
                                    "amount": amount,
                                }
                        
                        amount: MetaOapg.properties.amount
                        tokenId: MetaOapg.properties.tokenId
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenId", "amount", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenId", "amount", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
                            tokenId: typing.Union[MetaOapg.properties.tokenId, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                amount=amount,
                                tokenId=tokenId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokensRequested':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class tokensOffered(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "amount",
                                "tokenId",
                            }
                            
                            class properties:
                                
                                
                                class tokenId(
                                    schemas.IntSchema
                                ):
                                    pass
                                
                                
                                class amount(
                                    schemas.IntSchema
                                ):
                                    pass
                                __annotations__ = {
                                    "tokenId": tokenId,
                                    "amount": amount,
                                }
                        
                        amount: MetaOapg.properties.amount
                        tokenId: MetaOapg.properties.tokenId
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenId", "amount", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tokenId"]) -> MetaOapg.properties.tokenId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenId", "amount", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
                            tokenId: typing.Union[MetaOapg.properties.tokenId, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                amount=amount,
                                tokenId=tokenId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokensOffered':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            status = schemas.StrSchema
            __annotations__ = {
                "offeredBy": offeredBy,
                "acceptedBy": acceptedBy,
                "tokensRequested": tokensRequested,
                "tokensOffered": tokensOffered,
                "status": status,
            }
    
    tokensRequested: MetaOapg.properties.tokensRequested
    acceptedBy: MetaOapg.properties.acceptedBy
    offeredBy: MetaOapg.properties.offeredBy
    tokensOffered: MetaOapg.properties.tokensOffered
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offeredBy"]) -> MetaOapg.properties.offeredBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptedBy"]) -> MetaOapg.properties.acceptedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokensRequested"]) -> MetaOapg.properties.tokensRequested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokensOffered"]) -> MetaOapg.properties.tokensOffered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["offeredBy", "acceptedBy", "tokensRequested", "tokensOffered", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offeredBy"]) -> MetaOapg.properties.offeredBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptedBy"]) -> MetaOapg.properties.acceptedBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokensRequested"]) -> MetaOapg.properties.tokensRequested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokensOffered"]) -> MetaOapg.properties.tokensOffered: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["offeredBy", "acceptedBy", "tokensRequested", "tokensOffered", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tokensRequested: typing.Union[MetaOapg.properties.tokensRequested, list, tuple, ],
        acceptedBy: typing.Union[MetaOapg.properties.acceptedBy, str, ],
        offeredBy: typing.Union[MetaOapg.properties.offeredBy, str, ],
        tokensOffered: typing.Union[MetaOapg.properties.tokensOffered, list, tuple, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SDOrderGetAllResponse':
        return super().__new__(
            cls,
            *_args,
            tokensRequested=tokensRequested,
            acceptedBy=acceptedBy,
            offeredBy=offeredBy,
            tokensOffered=tokensOffered,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
