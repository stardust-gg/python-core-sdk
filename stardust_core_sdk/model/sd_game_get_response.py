# coding: utf-8

"""
    Stardust API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2023-05-08T04:33:59Z
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stardust_core_sdk import schemas  # noqa: F401


class SDGameGetResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This is the data output json model
    """


    class MetaOapg:
        required = {
            "bucketName",
            "image",
            "name",
            "id",
            "ownerId",
            "desc",
        }
        
        class properties:
            
            
            class id(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = 0
            ownerId = schemas.StrSchema
            name = schemas.StrSchema
            desc = schemas.StrSchema
            image = schemas.StrSchema
            bucketName = schemas.StrSchema
            news = schemas.StrSchema
            
            
            class fees(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                feePercentage = schemas.IntSchema
                                feeType = schemas.StrSchema
                                __annotations__ = {
                                    "feePercentage": feePercentage,
                                    "feeType": feeType,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["feePercentage"]) -> MetaOapg.properties.feePercentage: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["feeType"]) -> MetaOapg.properties.feeType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["feePercentage", "feeType", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["feePercentage"]) -> typing.Union[MetaOapg.properties.feePercentage, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["feeType"]) -> typing.Union[MetaOapg.properties.feeType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feePercentage", "feeType", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            feePercentage: typing.Union[MetaOapg.properties.feePercentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            feeType: typing.Union[MetaOapg.properties.feeType, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                feePercentage=feePercentage,
                                feeType=feeType,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fees':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            props = schemas.DictSchema
            testMode = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "ownerId": ownerId,
                "name": name,
                "desc": desc,
                "image": image,
                "bucketName": bucketName,
                "news": news,
                "fees": fees,
                "props": props,
                "testMode": testMode,
            }
    
    bucketName: MetaOapg.properties.bucketName
    image: MetaOapg.properties.image
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    ownerId: MetaOapg.properties.ownerId
    desc: MetaOapg.properties.desc
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucketName"]) -> MetaOapg.properties.bucketName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["news"]) -> MetaOapg.properties.news: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["props"]) -> MetaOapg.properties.props: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testMode"]) -> MetaOapg.properties.testMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "ownerId", "name", "desc", "image", "bucketName", "news", "fees", "props", "testMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucketName"]) -> MetaOapg.properties.bucketName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["news"]) -> typing.Union[MetaOapg.properties.news, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union[MetaOapg.properties.fees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["props"]) -> typing.Union[MetaOapg.properties.props, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testMode"]) -> typing.Union[MetaOapg.properties.testMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "ownerId", "name", "desc", "image", "bucketName", "news", "fees", "props", "testMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        bucketName: typing.Union[MetaOapg.properties.bucketName, str, ],
        image: typing.Union[MetaOapg.properties.image, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        ownerId: typing.Union[MetaOapg.properties.ownerId, str, ],
        desc: typing.Union[MetaOapg.properties.desc, str, ],
        news: typing.Union[MetaOapg.properties.news, str, schemas.Unset] = schemas.unset,
        fees: typing.Union[MetaOapg.properties.fees, list, tuple, schemas.Unset] = schemas.unset,
        props: typing.Union[MetaOapg.properties.props, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        testMode: typing.Union[MetaOapg.properties.testMode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SDGameGetResponse':
        return super().__new__(
            cls,
            *_args,
            bucketName=bucketName,
            image=image,
            name=name,
            id=id,
            ownerId=ownerId,
            desc=desc,
            news=news,
            fees=fees,
            props=props,
            testMode=testMode,
            _configuration=_configuration,
            **kwargs,
        )
